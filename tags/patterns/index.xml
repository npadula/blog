<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>patterns on nico.txt</title><link>https://npadula.com/blog/tags/patterns/</link><description>Recent content in patterns on nico.txt</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 11 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://npadula.com/blog/tags/patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Visiting C#: Different ways of implementing the Visitor Pattern</title><link>https://npadula.com/blog/posts/visiting-csharp-different-ways-implementing-visitor-pattern/</link><pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate><guid>https://npadula.com/blog/posts/visiting-csharp-different-ways-implementing-visitor-pattern/</guid><description>The purpose of the Visitor pattern is to add new behavior to classes without modifying them (too much). By using Visitor, we can create new behavior that acts upon certain entities, without placing that behavior on the entities themselves.
For example, consider serialization: what is better? entity.serialize() or serializer.serialize(entity) ? I&amp;rsquo;d say that the second option is preferable because we may want to implement a complex serialization process with several dependencies that don&amp;rsquo;t really relate to the entity itself.</description></item></channel></rss>